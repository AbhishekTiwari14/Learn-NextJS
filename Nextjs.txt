app router(newer way) v/s pages directory(older way)

ADVANTAGES OF NEXTJS:
-> Built-in Server-Side Rendering(SSR), Static Site Generation(SSG), and automatic code splitting result in faster load times and better performance
-> SSR improves SEO
-> Built-in routing, data fetching and caching

-> How does SSR solve the shortcomings of react?
-> SSR => 1st/initial render (initial html) takes place on server, this optimizes (1) waterfalling in react: Next, BE & DB are on the same machine, hence saves time by decreasing roundtrips b/w client & server to 1 only. 

NEXTJS/SSR FACTS:
-> Only the initial render happens on server and further renders(for state change, etc.) takes place directly on the client.
-> No access to browser constructs (lacal storage, window, etc.) and hooks.

CREATE NEXT APP: npx create-next-app@latest <File Name>

...............
APP ROUTER ::
...............

-> Whole code runs by-default only on the server & is send down to the actual application but if we want some code to run on client as well then we just need to add "use client" on top of that file.
Note: to use hooks, page must be "use client"

1 ROUTING:
Folder based routing
-> (1) Static Routes: 
    - app -> page.tsx => home page (ie, localhost:3000)
    - app -> 'cart' Folder -> page.tsx => /cart (ie, localhost:3000/cart)
-> (2) Nested Routes:
    - Nested routes created by nesting the folders
    - app -> 'blog' folder -> 'first' folder and 'second' folder =>
    localhost:3000/blog will render code written in app -> blog -> page.tsx
    localhost:3000/blog/first will render code written in app -> blog -> first -> page.tsx
    localhost:3000/blog/second will render code written in app -> blog -> second -> page.tsx
-> (3) Dynamic Routes: 
    -> same as nested routes but here, dynamic route is creating by using [], ie, square brackets while creating the nested folder.
    - app -> products -> [productId] -> page.tsx:
        export default function Page({ params }: { params: { productId: string } }) {
            return <div>My Product: {params.dynamicId}</div>
        }
    then localhost:3000/products/boatRockerz400 => page will show text: "My Product: boatRockerz400"

-> (4) Catch All Routes:
    - [...<folderName>] creates a dynamic route which can be further nested infinitely.
    - app -> products -> [...slug] -> page.tsx:
    export default function Page( {params} : {params: {slug: string[]}}){
        return (
            <div>{params.slug.join(",")}</div>
        )
    }
    then, localhost:3000/products/headphones/boat/on-ear => page will show text: "headphones,boat,on-ear"

-> (5) Parallel Routes: 
    - @<folderName> creates a slot which is same as a component, the difference being isolation of states and further routing etc. as a slot works as a mini app in itself; it makes code more modular as compared to traditional way of creating components which leads to complex nesting.
    - slots are passed as props and need not to be imported(as used to be for components)
    - slots are not part of url

-> Unmatched Routes for slots: let's say we have 3 slots for a particular url and slot s1 has a link to further routing, then on clicking that link, url will update but s2 and s3 will remain unaffected, but if we then reload the page, it will throw error 404 missing as s2 & s3 don't have a defualt ui, to avoid that:
- default.tsx page will become fallback page for other slots     

-> loading.tsx file will render untill the page.tsx file is loading. (suspense wala code nahi likhna padta)
-> error.tsx file can be created to handle error. it must be "use client" type. it has a prop called 'reset' which can be used to retry loading the page.
-> not-found.tsx will load if url route does not exist

-> Route Groups: To create a folder which should be ommited in url path, use (), ex.)
    (auth) -> login -> page.tsx => url: localhost:3000/login

(6) Intercepting Routes:
-> allows to render to route as a overlay on current page. Ex.) photos page localhost:3000/photos: when clicking on a photo(say photo no. 2): new route: localhost:3000/photos/2 will display the photo as an overlay with bg being the photos page; but on directly visiting the link: photos/2 , we go straight to the page of that specefic photo

-> convention: 
 -(.) to match segments on the same level (above ex.) 
 -(..) to match segments one level above (ex. app-> feed-> (..photo) & app->photo)
 -(..)(..) to match segments two levels above
 -(...) to match segments from the root app directory

 -> Intercepting Routes can be used together with Parallel Routes to create modals. This allows you to solve common challenges when building modals, such as:
- Making the modal content shareable through a URL.
- Preserving context when the page is refreshed, instead of closing the modal.
- Closing the modal on backwards navigation rather than going to the previous route.
- Reopening the modal on forwards navigation.
..............................................................

2 LAYOUT:
-> {children} component depends on the route.
-> app -> layout.tsx: 
    <body className={inter.className}>
        <header>
          HEADER
        </header>
        {children}
        <footer>
          FOOTER 
        </footer>  
      </body>
    -> HEADER and FOOTER will render on all pages but {children} component will depend on route. ex. localhost:3000 => children = app->page.tsx ; localhost:3000/

-> Nested Layout: same as nested routes. 

-> template.tsx: same as layout.tsx but only difference is that when user navigates b/w routes that share a template, a new instance of component is mounted, DOM elements are recreated & state is refreshed/not preserved. 
    ex. home -> nav mein searchbar pe kuch type kia, then kisi aur page mein chale gaye(usme bhi searchbar hai) to jo searchbar mein type kia tha vo blank ho jayega
    
.......................................................
NAVIGATING: 

-> Link Component is used to create hyperlinks (same as <a href = "">)
ex. <Link href = "/about"> About </Link>  // clicking on this text will redirect to about page
-> replace prop will delete history and on clicking backwards button, it will take to homepage
    <Link href = "/products/boat" replace> after we reach 'boat' page, then on going back, we'll go straight to home and not /products page 

-> 

........................................................

METADATA: 
