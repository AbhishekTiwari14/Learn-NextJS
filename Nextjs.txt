app router(newer way) v/s pages directory(older way)

ADVANTAGES OF NEXTJS:
-> Built-in Server-Side Rendering(SSR), Static Site Generation(SSG), and automatic code splitting result in faster load times and better performance
-> SSR improves SEO
-> Built-in routing, data fetching and caching

-> How does SSR solve the shortcomings of react?
-> SSR => 1st/initial render (initial html) takes place on server, this optimizes (1) waterfalling in react: Next, BE & DB are on the same machine, hence saves time by decreasing roundtrips b/w client & server to 1 only. 

NEXTJS/SSR FACTS:
-> Only the initial render happens on server and further renders(for state change, etc.) takes place directly on the client.
-> No access to browser constructs (lacal storage, window, etc.) and hooks.

CREATE NEXT APP: npx create-next-app@latest <File Name>

...............
APP ROUTER ::
...............

-> Whole code runs by-default only on the server & is send down to the actual application but if we want some code to run on client as well then we just need to add "use client" on top of that file.
Note: to use hooks, page must be "use client"

1 ROUTING:
Folder based routing
-> (1) Static Routes: 
    - app -> page.tsx => home page (ie, localhost:3000)
    - app -> 'cart' Folder -> page.tsx => /cart (ie, localhost:3000/cart)
-> (2) Nested Routes:
    - Nested routes created by nesting the folders
    - app -> 'blog' folder -> 'first' folder and 'second' folder =>
    localhost:3000/blog will render code written in app -> blog -> page.tsx
    localhost:3000/blog/first will render code written in app -> blog -> first -> page.tsx
    localhost:3000/blog/second will render code written in app -> blog -> second -> page.tsx
-> (3) Dynamic Routes: 
    -> same as nested routes but here, dynamic route is creating by using [], ie, square brackets while creating the nested folder.
    - app -> products -> [productId] -> page.tsx:
        export default function Page({ params }: { params: { productId: string } }) {
            return <div>My Product: {params.dynamicId}</div>
        }
    then localhost:3000/products/boatRockerz400 => page will show text: "My Product: boatRockerz400"

-> (4) Catch All Routes:
    - [...<folderName>] creates a dynamic route which can be further nested infinitely.
    - app -> products -> [...slug] -> page.tsx:
    export default function Page( {params} : {params: {slug: string[]}}){
        return (
            <div>{params.slug.join(",")}</div>
        )
    }
    then, localhost:3000/products/headphones/boat/on-ear => page will show text: "headphones,boat,on-ear"

-> (5) Parallel Routes: 
    - @<folderName> creates a slot which is same as a component, the difference being isolation of states and further routing etc. as a slot works as a mini app in itself; it makes code more modular as compared to traditional way of creating components which leads to complex nesting.
    - slots are passed as props and need not to be imported(as used to be for components)
    - slots are not part of url

-> Unmatched Routes for slots: let's say we have 3 slots for a particular url and slot s1 has a link to further routing, then on clicking that link, url will update but s2 and s3 will remain unaffected, but if we then reload the page, it will throw error 404 missing as s2 & s3 don't have a defualt ui, to avoid that:
- default.tsx page will become fallback page for other slots     

-> loading.tsx file will render untill the page.tsx file is loading. (suspense wala code nahi likhna padta)
-> error.tsx file can be created to handle error. it must be "use client" type. it has a prop called 'reset' which can be used to retry loading the page.
-> not-found.tsx will load if url route does not exist

-> Route Groups: To create a folder which should be ommited in url path, use (), ex.)
    (auth) -> login -> page.tsx => url: localhost:3000/login

(6) Intercepting Routes:
-> allows to render to route as a overlay on current page. Ex.) photos page localhost:3000/photos: when clicking on a photo(say photo no. 2): new route: localhost:3000/photos/2 will display the photo as an overlay with bg being the photos page; but on directly visiting the link: photos/2 , we go straight to the page of that specefic photo

-> convention: 
 -(.) to match segments on the same level (above ex.) 
 -(..) to match segments one level above (ex. app-> feed-> (..photo) & app->photo)
 -(..)(..) to match segments two levels above
 -(...) to match segments from the root app directory

 -> Intercepting Routes can be used together with Parallel Routes to create modals. This allows you to solve common challenges when building modals, such as:
- Making the modal content shareable through a URL.
- Preserving context when the page is refreshed, instead of closing the modal.
- Closing the modal on backwards navigation rather than going to the previous route.
- Reopening the modal on forwards navigation.
..............................................................

2 LAYOUT:
-> {children} component depends on the route.
-> app -> layout.tsx: 
    <body className={inter.className}>
        <header>
          HEADER
        </header>
        {children}
        <footer>
          FOOTER 
        </footer>  
      </body>
    -> HEADER and FOOTER will render on all pages but {children} component will depend on route. ex. localhost:3000 => children = app->page.tsx ; localhost:3000/

-> Nested Layout: same as nested routes. 

-> template.tsx: same as layout.tsx but only difference is that when user navigates b/w routes that share a template, a new instance of component is mounted, DOM elements are recreated & state is refreshed/not preserved. 
    ex. home -> nav mein searchbar pe kuch type kia, then kisi aur page mein chale gaye(usme bhi searchbar hai) to jo searchbar mein type kia tha vo blank ho jayega
    
.......................................................
NAVIGATING: 

-> Link Component is used to create hyperlinks (same as <a href = "">)
ex. <Link href = "/about"> About </Link>  // clicking on this text will redirect to about page
-> replace prop will delete history and on clicking backwards button, it will take to homepage
    <Link href = "/products/boat" replace> after we reach 'boat' page, then on going back, we'll go straight to home and not /products page 

-> 

........................................................

METADATA: 

.........................................................
ROUTE HANDLERS: 

-> Route Handlers are functions in nextjs using which we can create api endpoints and handle HTTP GET/POST/PUT/PATCH/DELETE/HEAD/OPTIONS Requests.

-> GET: ex. app->api->route.ts:
    export async function GET(){
        return new  Response("This is a get request");
    }
    this will give response at: localhost:3000/api:  "This is a get request"

-> POST: ex. same file: app->api->route.ts: 
        export async function POST(request: Request) {
        const input = await request.json();
        const newData = { id: data1.length + 1, title: input.title };
        data1.push(newData);
        return new Response(JSON.stringify(newData), {
            headers: { "Content-Type": "application/json" },
            status: 201,
        });
        }
    so on same url: localhost:3000/api: users request will be taken & the data(object) will be pushed to data1 array and we will get {id: <object no.> , title: <user input>} as response.

-> PATCH: => upadate/ partial modification. ex. file: app->api->[id]->route.ts:
        export async function PATCH(request: Request, { params } : {params: {id: string}}){
            const body = await request.json();
            const { title } = body;
            const index = data1.findIndex((obj) => obj.id === parseInt(params.id));
            data1[index].title = title;
            return Response.json(data1[index]);
        }   
    so on route: localhost:3000/api/1 if we request: {"title": "mowgli"}, then it will update the title of object with id = 1 to mowgli in data1.

-> DELETE: same file as of patch: api/[id] -> route.ts: 
        export async function DELETE(request: Request, { params } : {params: {id: string}}){
            const index = data1.findIndex((obj) => obj.id === parseInt(params.id));
            const deletedObj = data1[index]
            data1.splice(index, 1);
            return Response.json(deletedObj);
        } 
    so on if we delete on localhost:3000/api/1, then object with id=1 will get deleted from data1 array.

-> URL Query Parameters: on adding ?query=<searchQuery> to the url, we can add query to the url, ex. api-> seach -> route.ts: 
        export async function GET(request: NextRequest) {
        const searchParams = request.nextUrl.searchParams;
        const query = searchParams.get("query");
        console.log(query);
        const SearchedObj = query? data1.filter(obj => obj.title.includes(query)) : data1[1];
        return Response.json(SearchedObj);
        }
    url: localhost:3000/api/search?query=Dus will return object {id: 2, title: "Dusra"}

-> Redirects in Route Handlers: ex. in file: api->route.ts
        export async function GET(
            _request: Request,
            { params }: { params: { id: string } }
        ) {
            if (parseInt(params.id) > data1.length) {
            redirect("/api");
            }
            const searchObj = data1.find(
            (obj) => obj.id === parseInt(params.id)
            );
            return Response.json(searchObj);
        }
    Here,we search search for id which is not in data, we will get redirected to localhost:3000/api

-> Headers in Route Handlers: represent metadata associalted with req & res.
    - Request Headers: are sent by client to the  server. ex. 'user-agent' which tells server about browser & OS, 'accept' which identifies the content types(text/image/video) that client can process
    & 'authorization'

    - Response Headers: Server->Client. ex. 'Content-Type': tells about media type(json/application,text/html) of the response data.

    - Reading Request Headers: (M1): 
        const reqHeader = new Headers(request.headers)
        c.log(reqHeader.get("<name of req. header, ex. Authorization>")) 
    M2: 
        const headerList = headers();
        c.log(headerList.get("Authorization"));

    - Creating Response Headers:
        return new Response("API Data", {
            Headers: {
                "Content-Type": "text/html"
            }  
        })

-> Cookies in Route Handlers: 
    - cookies are small peices of data that server sends to client(browser) which it may store & send backto server with later requests.
    -cookies are mainly used for:
      1. session management like login & shopping creates
      2. personalizations like user preference & theme

    - setting cookie in header: M1: 
        Header: {
            Content-Type": "text/html",
            "Set-Cookie": "theme=dark"
        }

        M2: cookies().set("theme", "dark");
    
    - reading cookie: M1: 
        const theme = request.cookies.get("theme");
        c.log(theme); // {name: "theme", value: "dark"}

        M2: cookies().get("theme"); // {name: "theme", value: "dark", path: "/"}

-> Caching in Route Handlers:
    - Route Handlers are cached by default when using GET method with response object in nextjs 
    -ex. app->api->cached->route.ts:
        export async function GET(){
            return Response.json({
                time: new Date().toLocaleString()
            });
        }
        Here, time will be cached in "BUILD" mode, ie, on reloading the route page, time will not update.

    -How to Opt out of default caching? : 
        M1: Add line: export const dynamic =  "force-dynamic" on top of cached->route.ts file.
        M2: by using request object with the GET method
        M3: by adding dynamic fxns. like headers() & cookies()
        M4: by using any HTTP method other than GET

-> Middlewares: is a feature using which we can intercept & control flow of requests & responses in app.
    -It is used to do redirects, URL rewrites, auth, headers&cookie management, etc.
    - Middleware allows to specify paths where it will be active by 2 methods:
    ex. as soon as user enters url : localhost:3000/api, we want him to redirect to home page:
       M1: src->middleware.ts:
            export function middleware(request: NextRequest){
                return NextResponse.redirect(new URL("/", request.url));
            }

            export const config = {
                matcher: "/api",
            };
        
        M2: same file src->middleware.ts:
            export function middleware(request: NextRequest){
                if(request.nextUrl.pathname === "/api"){
                    return NextResponse.redirect(new URL("/", request.url));
                }
            }

.........................................................................
RENDERING: 

Rendering in react(CSR): Waterfall: involves 4 steps: 
    1: Initial HTML file: has empty root div & reference to js bundle. It looks like: 
        <html lang="en">
            <head>
                <meta charset="UTF-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <title>React App</title>
            </head>
            <body>
                <div id="root"></div>
                <script src="bundle.js"></script>
            </body>
        </html>

    2: Loading JavaScript Bundle: browser loads & executes the js bundle
    3: Rendering DOM 4: Updating DOM/state  
    -Drawbacks of CSR: (1) SEO: bcoz initial HTML file gives no info, (2) UX can suffer due to high load time as browser needs to download, parse & execute  js code before the user sees any meaningful content on page.

SSR: server directly sends full html + js reference; so user gets static ui instantly but interactivity comes when browser downloads & executes js. This phase is called 'hydration'. 

    -SSG(Static Site Generation): when page is highly static, ex. blog post, we directly have the page working instantly as it does'nt have much js to process.

    -Drawbacks of SSR: ALL OR NOTHING WATERFALL:
        1. having to load the fetch data for the entire page before starting to render it
        2. hydration can only start once whole page is loaded
        3. entire page must be hydrated(whole js file must be loaded & exxecuted), only after which interactivity of any component will work

Suspense for SSR: to overcome above Drawbacks, nextjs provides us with 2 suspense features:
    1. HTML streaming on the server: a component(which may have to show some fetched data) can be wrapped in <suspense </suspense>; doing so, will load HTML of all other components instantly & seperately load this component as soon as its data is fetched.
    ex. <Header />
        <suspense fallback = {spinner}> <Main /> <suspense>
        <Footer /> 

    2. Selective hydration on the client: code splitting is used(by default in nextjs) on Main component, this way hydration of other components will start withoout waiting for js of Main component to load. 

React Server Components(RSC): 
    -> Server Components: their code stays on the server & is never downloaded by browser. thes components take charge of data fetching & static rendering.
        -> Benefits: (1) Reduced bundle size for browser, (2) enhanced security for these components, (3) these components are on same machine as DB, so faster fetching of data for them, (4) caching (5) faster page load (6) Imroved SEO.  

    -> Client Components: are rendered once(initial render) on the server & then (all further renders) on the client.
    -> by default, all components are server components untill you add "use client" on top of file

-> RSC Loading Sequence: browser requests page->nextjs matches url to a server component & then instructs react to render that component->react renders the component & child components (also client component instructions) as RSC payload(special json format)-> nextjs uses RSC payload to generate HTML which is streamed fast as non-interactive UI to the user-> alongside nextjs streams RSC payload using which UI is progressively rendered->Final UI made->hydration starts->intereactive UI created.

-> RSC Update Sequence: browser requests refetch of specefic UI(say, another route)->nextjs matches url to a server component & then instructs react to render that component->react renders the component as RSC payload->nextjs streams RSC payload to client->nextjs triggers route rerender->react does reconciliation(merges rendered output with existing components)

Server Rendering Strategies: 
(1) Static Rendering: 
-> HTML is pre-generated (generated at build time) and RSC payload is created(& sent to client) for all components & js chunks are produced to client for hydration
-> It is cached by a CDN & is served almost instantly to the user.
-> As we navigate to another route, its HTML is already prefetched(nextjs preloads the route(s) in the background if the route/link is visible in user's viewport) and client uses its RSC payload & js chunks without any additional requests to the server 

(2) Dynamic Rendering:
-> routes are rendered for each user at request time
-> it is useful when route has data personalized to the user or contians info at request time such as cookies or search params
-> during rendering, it is a dynamic fxn.(cookies(), headers(), searchParams) is discovered, nextjs automatically switches to dynamic rendering that route

(3) Streaming: 
-> allows for progressive UI rendering from the server
-> work is divided into chunks & streamed to client as soon as its ready
-> this enables user to see parts of the pages immediately before the entire page is rendered  
-> wrap the component(s) which may take more time to render with <suspense> & streaming is achieved

Server-Only Code: 
->it is the code that we want to be executed on server only & must not be sent to the client. ex. env vars, code that processes confidential data, etc.
-> "server-only" package can be used to aviodd any chance of a file's code to be passed to client by just adding import "server-only" at top of file 
-> similarly "client-only" package is there.

Client Component Placement: client components are used to manage state & interactivity. If a component is made "client" component, then all its children/offsprings also become client components. So, it is recommended to position client components as low as possible in the component tree.

Interleaving SC & CC: using server component inside client component is not permitted (as it will be treated as client component which it is not). Although, we can use SC inside CC by passing it as a prop.

.................................................................
DATA FETCHING:

